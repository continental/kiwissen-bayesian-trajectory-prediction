# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

from autoclasstoc import Section
import sphinx_rtd_theme  # noqa: F401

from datetime import date

# -- Project information -----------------------------------------------------
year = str(date.today().year)
project = 'Bayesian Continual Learning'
copyright = '2021 - ' + year + ', Continental Heat AI'
author = 'Wirth, Christian'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.todo',
    'sphinx.ext.autosummary',
    'autoclasstoc',
    'sphinx.ext.autosectionlabel',
    "sphinx_rtd_theme",
    'm2r2',
    "sphinx.ext.githubpages",
    'sphinx.ext.intersphinx',
]


confluence_publish = False

# should be linked to in this documentation.

intersphinx_mapping = {
    'python': ('https://docs.python.org/3.8', None),
    'numpy': ('https://numpy.org/doc/stable', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/', None),
    'pandas': ('https://pandas.pydata.org/pandas-docs/stable', None),
    'sklearn': ('https://scikit-learn.org/stable', None),
    # tqdm objects.inv not available as of 2020-06-28
    # (see https://github.com/tqdm/tqdm/issues/705)
    # 'tqdm': ('https://tqdm.github.io/docs', None),
    'matplotlib': ('https://matplotlib.org/3.2.2', None),
    'plotly': ('https://plotly.github.io/plotly.py-docs/', None),
    'tensorflow': (
        "https://www.tensorflow.org/api_docs/python",
        "https://raw.githubusercontent.com/mr-ubik/tensorflow-intersphinx/master/tf2_py_objects.inv",
    ),
    'gin': ('https://gin.readthedocs.io/en/latest/', None),
}

intersphinx_cache_limit = 30

nitpick_ignore = [
    ('py:class', 'pandas.core.series.Series'),  # actually pandas.Series
    ('py:class', 'pandas.core.frame.DataFrame'),  # actually pandas.DataFrame
    ('py:class', 'tqdm.std.tqdm'),
    ('py:class', 'tqdm.tqdm'),  # currently there is no objects.inv
    ('py:class', 'matplotlib.axes._axes.Axes'),  # actually matplotlib.axes.Axes
    ('py:class', 'COCO'),  # no objects.inv available
    ('py:class', 'Tuple'),
    ('py:const', 'logging.INFO'),
    ('py:class', 'xgboost.sklearn.XGBClassifier'),
    ('py:class', 'multiprocessing.context.Process'),
    ('js:func', 'String'),
    ('js:func', 'Integer'),
    ('js:func', 'Binary'),
    # NEEDS TO BE CHECKED
    ('py:class', 'value'),
    ('py:class', 'View'),
    ('py:class', 'class'),
    ('py:class', 'json'),
    # not in python objects.inv
]
# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# This value is a list of autodoc directive flags that should be

# automatically applied to all autodoc directives. The supported flags are

# 'members', 'undoc-members', 'private-members', 'special-members',

# 'inherited-members', 'show-inheritance', 'ignore-module-all', and

# 'exclude-members'.

autodoc_default_options = {
    'members': True,
    'show-inheritance': True,
    'private-members': False,
    'undoc-members': True,
    'inherited-members': False,
    'special-members': None,  # include members named like __special__
    'exclude-members': "__repr__,__str__,__hash__,__dict__,__weakref__,__new__,__module__, __abstractmethods__,__annotations__,__init__",  # already included in class header
}

# This value selects what content will be inserted into the main body
# of an autoclass directive. The possible values are:
# - "class": Only the class� docstring is inserted.
#   This is the default. You can still document
#   __init__ as a separate method using automethod or
#   the members option to autoclass.
# - "both": Both the class� and the __init__ method�s docstring
#   are concatenated and inserted.
# - "init": Only the __init__ method�s docstring is inserted.
autoclass_content = 'both'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

show_authors = True

add_module_names = False

autodoc_inherit_docstrings = True

autodoc_member_order = 'groupwise'

autodoc_typehints = 'description'

autodoc_default_flags = ['members']

autosummary_generate = True


class AbstractMethods(Section):
    key = 'abstract-methods'
    title = "Abtract Methods:"

    def predicate(self, name, attr, meta):
        return getattr(attr, '__isabstractmethod__', False)


autoclasstoc_sections = [
    'abstract-methods',
    'public-methods',
    'private-methods',
]


def setup(app):
    app.add_css_file('css/my_theme.css')

import pathlib
rst_file = pathlib.Path(os.getcwd()) / "mdfiles.rst"
with open(rst_file,"w") as file:
    for mdfile in pathlib.Path(os.getcwd()).parent.parent.glob("*.md"):
        if "LICENSES" not in mdfile.name:
            file.write(f".. mdinclude:: ../../{mdfile.name}\n")
